
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid               String   @id @default(cuid()) @map("id")
  username          String   @unique
  email             String   @unique
  password          String
  name              String?
  bio               String?
  photoURL          String?
  subscription      Subscription @default(free)
  hasBlueCheck      Boolean @default(false)
  privacy           Json?
  hasVerifiedEmail  Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follow[] @relation("followers")
  following   Follow[] @relation("following")
  credentials Credential[]
}

model Post {
  id           String   @id @default(cuid())
  content      String?
  imageUrls    String[]
  liveVideoUrl String?
  postType     PostType @default(text)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [uid])
  authorId  String
  comments  Comment[]
  likes     Like[]
}

enum PostType {
  text
  live_video
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [uid])
  authorId  String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [uid])
  userId    String
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [uid])
  followerId String
  following User @relation("followers", fields: [followingId], references: [uid])
  followingId String
}

model Credential {
  id           String  @id @default(cuid())
  userId       String
  provider     String
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [uid])

  @@unique([userId, provider])
}

model Email {
  id             String   @id @default(cuid())
  email          String
  code           String
  verificationId String   @unique
  expireAt       DateTime
  createdAt      DateTime @default(now())
}

enum Subscription {
  free
  premium
  pro
}
