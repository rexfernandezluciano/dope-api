// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid              String       @id @default(cuid()) @map("id")
  username         String       @unique
  email            String       @unique
  password         String
  name             String?
  bio              String?
  photoURL         String?
  subscription     Subscription @default(free)
  nextBillingDate  DateTime?
  hasBlueCheck     Boolean      @default(false)
  privacy          Json?
  hasVerifiedEmail Boolean      @default(false)
  isBlocked        Boolean      @default(false)
  isRestricted     Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  posts          Post[]
  comments       Comment[]
  likes          Like[]
  commentLikes   CommentLike[]
  followers      Follow[]        @relation("followers")
  following      Follow[]        @relation("following")
  credentials    Credential[]
  sessions       Session[]
  reports        Report[]
  blockedBy      Block[]         @relation("BlockedBy")
  blocking       Block[]         @relation("Blocking")
  paymentMethods PaymentMethod[]
  adCampaigns    AdCampaign[]
}

model Post {
  id           String   @id @default(cuid())
  content      String?
  imageUrls    String[]
  liveVideoUrl String?
  postType     PostType @default(text)
  privacy      Privacy  @default(public)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author    User           @relation(fields: [authorId], references: [uid])
  authorId  String
  comments  Comment[]
  likes     Like[]
  analytics PostAnalytics?
  mentions  Mention[]
  hashtags  Hashtag[]
}

enum PostType {
  text
  live_video
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post          @relation(fields: [postId], references: [id])
  postId   String
  author   User          @relation(fields: [authorId], references: [uid])
  authorId String
  parent   Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]     @relation("CommentReplies")
  likes    CommentLike[]
  mentions Mention[]
  hashtags Hashtag[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [uid])
  userId String
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  follower    User   @relation("following", fields: [followerId], references: [uid])
  followerId  String
  following   User   @relation("followers", fields: [followingId], references: [uid])
  followingId String
}

model Credential {
  id           String   @id @default(cuid())
  userId       String
  provider     String
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [uid])

  @@unique([userId, provider])
}

model Email {
  id             String   @id @default(cuid())
  email          String
  code           String
  verificationId String   @unique
  expireAt       DateTime
  createdAt      DateTime @default(now())
}

enum Subscription {
  free
  premium
  pro
}

model PostAnalytics {
  id        String   @id @default(cuid())
  postId    String   @unique
  views     Int      @default(0)
  shares    Int      @default(0)
  clicks    Int      @default(0)
  earnings  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
}

enum Privacy {
  public
  private
  followers
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  userId    String?
  ipAddress String?
  location  String?
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [uid])
}

model Report {
  id          String       @id @default(cuid())
  reporterId  String
  targetType  ReportType
  targetId    String
  reason      ReportReason
  description String?
  status      ReportStatus @default(pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  reporter User @relation(fields: [reporterId], references: [uid])

  @@unique([reporterId, targetType, targetId])
}

model Block {
  id        String       @id @default(cuid())
  blockerId String
  blockedId String
  reason    BlockReason?
  createdAt DateTime     @default(now())

  blocker User @relation("BlockedBy", fields: [blockerId], references: [uid])
  blocked User @relation("Blocking", fields: [blockedId], references: [uid])

  @@unique([blockerId, blockedId])
}

model PaymentMethod {
  id                    String          @id @default(cuid())
  userId                String
  type                  PaymentType
  provider              PaymentProvider @default(paypal)
  paypalPaymentMethodId String          @unique
  last4                 String?
  expiryMonth           Int?
  expiryYear            Int?
  holderName            String?
  phoneNumber           String?
  paypalEmail           String?
  isDefault             Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  user User @relation(fields: [userId], references: [uid])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [uid])

  @@unique([commentId, userId])
}

model Mention {
  id        String   @id @default(cuid())
  postId    String?
  commentId String?
  username  String
  createdAt DateTime @default(now())

  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}

model Hashtag {
  id        String   @id @default(cuid())
  postId    String?
  commentId String?
  tag       String
  createdAt DateTime @default(now())

  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@index([tag])
}

enum ReportType {
  post
  comment
  user
}

enum ReportReason {
  spam
  harassment
  hate_speech
  inappropriate_content
  copyright
  other
}

enum ReportStatus {
  pending
  reviewed
  resolved
  dismissed
}

enum BlockReason {
  harassment
  spam
  inappropriate_content
  other
}

enum PaymentType {
  paypal_card
  paypal_wallet
}

enum PaymentProvider {
  paypal
}

model AdCampaign {
  id             String       @id @default(cuid())
  title          String
  description    String?
  targetType     AdTargetType
  targetId       String?
  budget         Int // Budget in cents
  spent          Int          @default(0) // Amount spent in cents
  earnings       Int          @default(0) // Earnings in cents
  duration       Int // Duration in days
  targetAudience Json?
  adType         AdType       @default(promotion)
  status         AdStatus     @default(pending)
  advertiserId   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  startDate      DateTime?
  endDate        DateTime?

  advertiser User         @relation(fields: [advertiserId], references: [uid])
  analytics  AdAnalytics?
}

model AdAnalytics {
  id          String   @id @default(cuid())
  campaignId  String   @unique
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  reach       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign AdCampaign @relation(fields: [campaignId], references: [id])
}

enum AdTargetType {
  post
  profile
  hashtag
  general
}

enum AdType {
  promotion
  sponsored
  banner
  video
}

enum AdStatus {
  pending
  active
  paused
  completed
  rejected
}
